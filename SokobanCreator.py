# -*- coding: utf-8 -*-
import math
# Form implementation generated from reading ui file 'SokobanCreator.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import re
import os
import tempfile
import subprocess
import uuid
from datetime import time
from time import sleep

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QProcess, Qt, QCoreApplication, QLocale
from PyQt5.QtWidgets import QPushButton, QSizePolicy, QFileDialog


def create_icon(path):
    return QtGui.QIcon(path)


def set_icon(button, icon):
    button.setIcon(icon)
    button.setIconSize(button.size())


class Ui_MainWindow(object):

    def __init__(self):
        self.all_previous_arrays = None
        self.execution_running = None
        self.current_execution_step = None
        self.button_size = None
        self.current_solution = None
        self.current_mode = None
        self.modes = None
        self.save_button = None
        self.actionAbout = None
        self.board_frame = None
        self.box_icon = None
        self.box_on_target_icon = None
        self.centralwidget = None
        self.clear_icon = None
        self.colors = None
        self.cols = None
        self.console_frame = None
        self.console_screen = None
        self.gridLayout = None
        self.gridLayout_2 = None
        self.horizontalLayout = None
        self.horizontalLayout_3 = None
        self.horizontalLayout_4 = None
        self.horizontalLayout_5 = None
        self.left_button = None
        self.left_buttons_frame = None
        self.left_layout = None
        self.letters = None
        self.load_config_dialog = None
        self.loadButton = None
        self.max_id = None
        self.menubar = None
        self.menuSettings = None
        self.player_icon = None
        self.pushButton = None
        self.button_increase_size = None
        self.button_solver_mode = None
        self.button_decrease_size = None
        self.pushbuttons = None
        self.pushbuttons2d = None
        self.right_button = None
        self.right_panel_layout = None
        self.right_top_buttons = None
        self.rows = None
        self.size = None
        self.solution_move_frame = None
        self.solve_button = None
        self.statusbar = None
        self.stop_button = None
        self.target_icon = None
        self.timeout_spinbox = None
        self.wall_icon = None

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1200, 900)
        MainWindow.setFixedSize(1200, 900)

        self.colors = ["white", "black", "orange", "blue", "yellow", "green", "red"]
        self.letters = [' ', 'Wall', 'Box', 'Target', 'Player', 'b/tgt', 'p/tgt']
        self.modes = ['HSP', 'FF', 'GSP', 'TFD', 'PFD']

        self.current_mode = 0

        self.current_execution_step = 0
        self.execution_running = False
        self.all_previous_arrays = {}

        self.size = 20
        self.cols = self.size
        self.rows = self.size
        for args in sys.argv:
            if "col=" in args:
                self.cols = int(args.split("=")[1])
            if "row=" in args:
                self.rows = int(args.split("=")[1])

        self.button_size = math.floor(700/float(self.size))

        self.player_icon = create_icon("sprites/Player/player_05.png")
        self.wall_icon = create_icon("sprites/Blocks/block_05.png")
        self.clear_icon = create_icon("sprites/Ground/ground_01.png")
        self.target_icon = create_icon("sprites/Ground/ground_04.png")
        self.box_icon = create_icon("sprites/Crates/crate_02.png")
        self.box_on_target_icon = create_icon("sprites/Crates/crate_27.png")

        self.pushbuttons = []
        self.pushbuttons2d = []  # not optimized bu meh

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.left_layout = QtWidgets.QVBoxLayout()
        self.left_layout.setObjectName("left_layout")
        self.board_frame = QtWidgets.QFrame(self.centralwidget)
        self.board_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.board_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.board_frame.setMinimumSize(700, 700)
        self.board_frame.setMaximumSize(700,700)
        self.board_frame.setObjectName("board_frame")

        self.gridLayout_2 = QtWidgets.QGridLayout(self.board_frame)
        self.gridLayout_2.setSpacing(0)
        self.gridLayout_2.setObjectName("gridLayout_2")

        number = 0
        for i in range(self.rows):
            for j in range(self.cols):
                self.pushbuttons.append(QtWidgets.QPushButton(self.board_frame))
                self.pushbuttons[number].setObjectName("button_{}_{}".format(i, j))
                self.pushbuttons[number].setMaximumSize(QtCore.QSize(self.button_size, self.button_size))
                # self.pushbuttons[number].setMinimumSize(QtCore.QSize(60, 60))
                self.pushbuttons[number].setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
                self.pushbuttons[number].setProperty("color_integer", 0)
                self.pushbuttons[number].setText(self.letters[0])
                self.pushbuttons[number].setStyleSheet("background-color: {};".format(self.colors[0]))
                self.set_button_color(self.pushbuttons[number], 0)

                self.gridLayout_2.addWidget(self.pushbuttons[number], i, j, 1, 1)
                self.pushbuttons[number].clicked.connect(
                    lambda _, button=self.pushbuttons[number]: self.change_button_color(button, "l"))
                self.pushbuttons[number].setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
                self.pushbuttons[number].customContextMenuRequested.connect(
                    lambda _, button=self.pushbuttons[number]: self.change_button_color(button, "r"))
                number += 1

        self.left_layout.addWidget(self.board_frame)
        self.left_buttons_frame = QtWidgets.QFrame(self.centralwidget)
        self.left_buttons_frame.setMaximumSize(QtCore.QSize(16777215, 50))
        self.left_buttons_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.left_buttons_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.left_buttons_frame.setObjectName("left_buttons_frame")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.left_buttons_frame)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.button_increase_size = QtWidgets.QPushButton(self.left_buttons_frame)
        self.button_increase_size.setMinimumSize(QtCore.QSize(0, 30))
        self.button_increase_size.setObjectName("button_increase_size")
        self.horizontalLayout_4.addWidget(self.button_increase_size)
        self.button_decrease_size = QtWidgets.QPushButton(self.left_buttons_frame)
        self.button_decrease_size.setMinimumSize(QtCore.QSize(0, 30))
        self.button_decrease_size.setObjectName("button_decrease_size")
        self.horizontalLayout_4.addWidget(self.button_decrease_size)
        self.loadButton = QtWidgets.QPushButton(self.left_buttons_frame)
        self.loadButton.setMinimumSize(QtCore.QSize(0, 30))
        self.loadButton.setMaximumSize(QtCore.QSize(16777215, 30))
        self.loadButton.setObjectName("loadButton")
        self.horizontalLayout_4.addWidget(self.loadButton)
        self.save_button = QtWidgets.QPushButton(self.left_buttons_frame)
        self.save_button.setMinimumSize(QtCore.QSize(0, 30))
        self.save_button.setMaximumSize(QtCore.QSize(16777215, 30))
        self.save_button.setObjectName("save_button")
        self.horizontalLayout_4.addWidget(self.save_button)
        self.pushButton = QtWidgets.QPushButton(self.left_buttons_frame)
        self.pushButton.setMinimumSize(QtCore.QSize(0, 30))
        self.pushButton.setMaximumSize(QtCore.QSize(16777215, 30))
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_4.addWidget(self.pushButton)
        self.left_layout.addWidget(self.left_buttons_frame)
        self.horizontalLayout.addLayout(self.left_layout)
        self.right_panel_layout = QtWidgets.QVBoxLayout()
        self.right_panel_layout.setObjectName("right_panel_layout")
        self.right_top_buttons = QtWidgets.QFrame(self.centralwidget)
        self.right_top_buttons.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.right_top_buttons.setFrameShadow(QtWidgets.QFrame.Raised)
        self.right_top_buttons.setObjectName("right_top_buttons")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.right_top_buttons)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.solve_button = QtWidgets.QPushButton(self.right_top_buttons)
        self.solve_button.setObjectName("solve_button")
        self.horizontalLayout_3.addWidget(self.solve_button)
        self.stop_button = QtWidgets.QPushButton(self.right_top_buttons)
        self.stop_button.setObjectName("stop_button")
        self.horizontalLayout_3.addWidget(self.stop_button)
        self.button_solver_mode = QtWidgets.QPushButton(self.right_top_buttons)
        self.button_solver_mode.setObjectName("button_solver_mode")
        self.horizontalLayout_3.addWidget(self.button_solver_mode)
        self.right_panel_layout.addWidget(self.right_top_buttons)

        self.console_frame = QtWidgets.QFrame(self.centralwidget)
        self.console_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.console_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.console_frame.setObjectName("console_frame")
        self.gridLayout = QtWidgets.QGridLayout(self.console_frame)
        self.gridLayout.setObjectName("gridLayout")
        self.console_screen = QtWidgets.QPlainTextEdit(self.console_frame)
        self.console_screen.setStyleSheet("background-color: rgb(119, 118, 123); color: rgb(255, 145, 0);")
        self.console_screen.setReadOnly(True)
        self.console_screen.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.console_screen.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.console_screen.setObjectName("console_screen")
        self.gridLayout.addWidget(self.console_screen, 0, 0, 1, 1)
        self.right_panel_layout.addWidget(self.console_frame)

        self.solution_move_frame = QtWidgets.QFrame(self.centralwidget)
        self.solution_move_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.solution_move_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.solution_move_frame.setObjectName("solution_move_frame")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.solution_move_frame)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.run_solve_button = QtWidgets.QPushButton(self.solution_move_frame)
        self.run_solve_button.setObjectName("run_solve_button")
        self.horizontalLayout_5.addWidget(self.run_solve_button)
        self.timeout_spinbox = QtWidgets.QDoubleSpinBox(self.right_top_buttons)
        self.timeout_spinbox.setSingleStep(0.5)
        # set the decimal separator to '.'
        locale = QLocale(QLocale.English, QLocale.UnitedStates)
        self.timeout_spinbox.setLocale(locale)
        self.timeout_spinbox.setObjectName("timeout_spinbox")
        self.horizontalLayout_5.addWidget(self.timeout_spinbox)
        self.left_button = QtWidgets.QPushButton(self.solution_move_frame)
        self.left_button.setObjectName("left_button")
        self.horizontalLayout_5.addWidget(self.left_button)
        self.right_button = QtWidgets.QPushButton(self.solution_move_frame)
        self.right_button.setObjectName("right_button")
        self.horizontalLayout_5.addWidget(self.right_button)
        self.right_panel_layout.addWidget(self.solution_move_frame)
        self.horizontalLayout.addLayout(self.right_panel_layout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1169, 26))
        self.menubar.setObjectName("menubar")
        self.menuSettings = QtWidgets.QMenu(self.menubar)
        self.menuSettings.setObjectName("menuSettings")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.menuSettings.addAction(self.actionAbout)
        self.menubar.addAction(self.menuSettings.menuAction())

        self.setup_buttons()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def setup_buttons(self):
        self.pushButton.clicked.connect(self.exportSokoban)
        self.button_increase_size.clicked.connect(self.increase_size)
        self.button_increase_size.setEnabled(False)
        self.button_decrease_size.clicked.connect(self.decrease_size)
        self.button_decrease_size.setEnabled(False)
        self.loadButton.clicked.connect(self.load_level)
        self.save_button.clicked.connect(self.save_level)
        self.solve_button.clicked.connect(self.solve)
        self.button_solver_mode.clicked.connect(self.change_solver)
        self.right_button.clicked.connect(self.next_step)
        self.left_button.clicked.connect(self.previous_step)
        self.run_solve_button.clicked.connect(self.auto_run)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SokobanCreator v0.2"))
        for button in self.pushbuttons:
            button.setText(_translate("MainWindow", ""))
        self.button_increase_size.setText(_translate("MainWindow", "Increase Size"))
        self.button_decrease_size.setText(_translate("MainWindow", "Decrease Size"))
        self.pushButton.setText(_translate("MainWindow", "Export"))
        self.solve_button.setText(_translate("MainWindow", "Solve"))
        self.stop_button.setText(_translate("MainWindow", "Stop"))
        self.button_solver_mode.setText(_translate("MainWindow", self.modes[0]))
        self.loadButton.setText(_translate("MainWindow", "Load level"))
        self.save_button.setText(_translate("MainWindow", "Save level"))
        self.left_button.setText(_translate("MainWindow", "<"))
        self.right_button.setText(_translate("MainWindow", ">"))
        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.run_solve_button.setText(_translate("MainWinow", "Auto Run"))

    def increase_size(self):
        if self.size < 20:
            self.size += 1

        print("increase")

    def decrease_size(self):
        if self.size > 1:
            self.size -= 1;
        print("decrease")

    def auto_run(self):
        self.right_button.setEnabled(False)
        self.left_button.setEnabled(False)
        i = 0
        for elem in self.current_solution :
            if i >= self.current_execution_step :
                self.next_step()
                QCoreApplication.processEvents()
                sleep(self.timeout_spinbox.value())
            i += 1
        self.right_button.setEnabled(True)
        self.left_button.setEnabled(True)

    def change_solver(self):
        self.current_mode = (self.current_mode + 1) % len(self.modes)
        self.button_solver_mode.setText(self.modes[self.current_mode])

    def reset_buttons(self):
        print("widht ", self.board_frame.width(), " - height : ", self.board_frame.height())

    def load_level(self):
        print("load level")
        file_name = self.open_file_dialog()
        opened_line = ""
        if file_name:
            with open(file_name, 'r') as file:
                for line in file.readlines():
                    if "\"testIn\"" in line:
                        opened_line = line;

            if opened_line != "":
                opened_line = re.findall(r"\"testIn\": \"(.*?)\"", opened_line)[0]
                input_chars = [[]]
                i = 0
                prec_was_anti_slash = False
                for charac in opened_line:
                    if charac == "\\":
                        prec_was_anti_slash = True
                    elif charac == "n" and prec_was_anti_slash:
                        i += 1
                        input_chars.append([])
                        prec_was_anti_slash = False
                    elif prec_was_anti_slash:
                        prec_was_anti_slash = False
                        input_chars[i].append("\\")
                        input_chars[i].append(charac)
                    else:
                        input_chars[i].append(charac)
                for i in range(len(input_chars)):
                    to_print = ""
                    for j in range(len(input_chars[i])):
                        to_print += input_chars[i][j]
                    print(to_print)
                arr = self.buttons_to_array()
                input_arr_i = 0
                i_ended = False
                j_ended = False
                for i in range(self.rows):
                    input_arr_j = 0
                    for j in range(self.cols):
                        self.set_button_color(arr[i][j], 0)
                        if not i_ended and not j_ended:
                            button = arr[i][j]
                            self.set_button_char(button, input_chars[input_arr_i][input_arr_j])
                            input_arr_j += 1
                            if input_arr_j >= len(input_chars[i]):
                                j_ended = True
                    input_arr_i += 1
                    j_ended = False
                    if input_arr_i >= len(input_chars):
                        i_ended = True
        self.reset_buttons()

    def save_level(self):
        filename = self.save_file_dialog()
        if filename:
            with open(filename, "w+") as file:
                file.writelines(self.exportSokoban(to_file=True))

    def save_file_dialog(self):
        self.load_config_dialog = QFileDialog()
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        file_name, _ = QFileDialog.getSaveFileName(self.load_config_dialog, "QFileDialog.getOpenFileName()", "",
                                                   "All Files (*);;Python Files (*.py)", options=options)
        return file_name

    def open_file_dialog(self):
        self.load_config_dialog = QFileDialog()
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        file_name, _ = QFileDialog.getOpenFileName(self.load_config_dialog, "QFileDialog.getOpenFileName()", "",
                                                   "All Files (*);;Python Files (*.py)", options=options)
        return file_name

    def change_button_color(self, button, click):
        color = button.property("color_integer")
        if click == "l":
            new_color = (color + 1) % 7
        else:
            new_color = (color - 1) % 7
        self.set_button_color(button, new_color)

    def set_button_color(self, button, new_color):
        button.setStyleSheet("background-color: {};".format(self.colors[new_color]))
        if new_color == 0:
            set_icon(button, self.clear_icon)
        if new_color == 1:
            set_icon(button, self.wall_icon)
        if new_color == 2:
            set_icon(button, self.box_icon)
        if new_color == 3:
            set_icon(button, self.target_icon)
        if new_color == 4:
            set_icon(button, self.player_icon)
        if new_color == 5:
            set_icon(button, self.box_on_target_icon)
        if new_color == 6:
            set_icon(button, self.player_icon)

        button.setProperty("color_integer", new_color)

    def set_button_char(self, button, car):
        value = 0
        if car == " ":
            value = 0
        elif car == "#":
            value = 1
        elif car == "$":
            value = 2
        elif car == ".":
            value = 3
        elif car == "@":
            value = 4
        elif car == "*":
            value = 5
        elif car == "+":
            value = 6
        self.set_button_color(button, value)

    def buttons_to_array(self):
        array_out = []
        for i in range(self.rows):
            array_out.append([])
            for j in range(self.cols):
                array_out[i].append(0)
        for button in self.pushbuttons:
            row, column, rowspan, columnspan = self.gridLayout_2.getItemPosition(self.gridLayout_2.indexOf(button))
            array_out[row][column] = button
        return array_out

    def array_to_string(self):
        buttons = self.buttons_to_array()
        width = 0
        height = 0
        # Determine the max width and height of array
        for i in range(len(buttons)):
            first_wall = -1
            second_wall = -1
            something_else_than_void = False
            for j in range(len(buttons[i])):
                color = buttons[i][j].property("color_integer")
                if color != 0:
                    something_else_than_void = True
                if color == 1:
                    first_wall = True
            for j in range(len(buttons[i]) - 1, 0, -1):
                color = buttons[i][j].property("color_integer")
                if color == 1:
                    if j != first_wall:
                        # the line contains stuff
                        if j + 1 > width:
                            width = j + 1
            # If there was nothing on this line
            if not something_else_than_void:
                height = i
                break
        if height == 0:
            height = i
        return width, height, buttons

    def buttons_to_int(self):
        buttons = self.buttons_to_array()
        array = []
        for i in range(len(buttons)):
            array.append([])
            for j in range(len(buttons[i])):
                array[i].append(buttons[i][j].property("color_integer"))
        return array

    def exportSokoban(self, to_file=False):
        width, height, array = self.array_to_string()

        to_print = ""
        for i in range(height):
            for j in range(width):
                car = array[i][j].property("color_integer")
                if car == 0:
                    to_print += " "
                elif car == 1:
                    to_print += "#"
                elif car == 2:
                    to_print += "$"
                elif car == 3:
                    to_print += "."
                elif car == 4:
                    to_print += "@"
                elif car == 5:
                    to_print += "*"
                elif car == 6:
                    to_print += "+"
            if i != height - 1:
                to_print += "\\n"
        if not to_file:
            print("{")
            print("\t\"title\": {")
            print("\t\t\"2\": \"Scoria - Generated Level\"")
            print("\t},")
            print("\t\"testIn\": \"{}\",".format(to_print))
            print("\t\"isTest\": \"true\",")
            print("\t\"isValidator\": \"true\"")
            print("}")
        else:
            out = ""
            out += "\n" + "{"
            out += "\n" + "\t\"title\": {"
            out += "\n" + "\t\t\"2\": \"Scoria - Generated Level\""
            out += "\n" + "\t},"
            out += "\n" + "\t\"testIn\": \"{}\",".format(to_print)
            out += "\n" + "\t\"isTest\": \"true\","
            out += "\n" + "\t\"isValidator\": \"true\""
            out += "\n" + "}"
            return out

    def solve(self):
        tmpath = "./__tmp__"
        self.current_execution_step = 0
        self.execution_running = False
        self.current_solution = []
        self.console_screen.setPlainText("")
        json_filename = str(uuid.uuid4())
        pddl_filename = str(uuid.uuid4())
        json_filepath = os.path.join(tmpath, json_filename)
        pddl_filepath = os.path.join(tmpath, pddl_filename)
        with open(json_filepath, 'w') as json_file:
            string = self.exportSokoban(to_file=True)
            command = "java jsonToDomain {} Sokoban-Tester false".format(json_filepath)
            json_file.write(string)
            json_file.flush()
            result = 0
            result = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(result.stdout.decode())
            if result != 0:
                with open(pddl_filepath, 'w') as pddl_file:
                    pddl_file.write(result.stdout.decode())
                    pddl_file.flush()
                    # solve
                    #
                    command_solve = self.java_command(pddl_filepath)
                    print("Running Solver ...")
                    self.console_screen.setPlainText("Running Solver ...")
                    process = QProcess()
                    process.start(command_solve)
                    while process.state() == QProcess.Running:
                        QCoreApplication.processEvents()
                    if not process.waitForStarted():
                        print("Java command failed to start")
                    process.waitForFinished(-1)  # Wait for the process to finish
                    out = process.readAllStandardOutput().data().decode()
                    start_read = False
                    solution_lines = []
                    for line in out.split("\n"):
                        if "found plan as follows:" in line:
                            start_read = True
                        if "time spent: " in line and "seconds parsing" in line:
                            start_read = False

                        if start_read :
                            print(line)
                            solution_lines.append(line)
                    text = ""
                    self.parse_solution(solution_lines)
                    for elem in self.current_solution :
                        text += elem+"\n"
                    self.console_screen.setPlainText(text)
        os.remove(pddl_filepath)
        os.remove(json_filepath)

    def parse_solution(self, solution_list):
        solution = []
        for line in solution_list :
            if "right" in line:
                solution.append("RIGHT")
            elif "left" in line:
                solution.append("LEFT")
            elif "up" in line:
                solution.append("UP")
            elif "down" in line:
                solution.append("DOWN")
        self.current_solution = solution


                    # result = subprocess.run(command_solve, stdout=subprocess.PIPE, shell=True)

        # os.remove(json_filename)
        # os.remove(pddl_filename)

    def java_command(self, pddl_filepath):
        pddl_jar_path = "./lib/pddl4j-4.0.0.jar"
        domain_path = "./domain.pddl"
        if self.current_mode == 1:
            command_solve = "java -cp {} fr.uga.pddl4j.planners.statespace.FF {} {} -t 1000".format(
                pddl_jar_path, domain_path, pddl_filepath
            )
        elif self.current_mode == 0:
            command_solve = "java -cp {} fr.uga.pddl4j.planners.statespace.HSP {} {} -e MAX -w 1.2 -t 1000".format(
                pddl_jar_path, domain_path, pddl_filepath
            )
        elif self.current_mode == 2:
            command_solve = "java -cp {} fr.uga.pddl4j.planners.statespace.GSP {} {} -s ENFORCED_HILL_CLIMBING ASTAR" \
                            " -e FAST_FORWARD -t 1000".format(pddl_jar_path, domain_path, pddl_filepath
                                                              )
        elif self.current_mode == 3 :
            command_solve = "java -cp {} fr.uga.pddl4j.planners.statespace.TFD {} {} -t 1000".format(
                pddl_jar_path, domain_path, pddl_filepath
            )
        else :
            command_solve = "java -cp {} fr.uga.pddl4j.planners.statespace.PFD {} {} -t 1000".format(
                pddl_jar_path, domain_path, pddl_filepath
            )
        return command_solve

    """
    java -cp build/libs/pddl4j-4.0.0.jar fr.uga.pddl4j.planners.statespace.FF
           src/test/resources/benchmarks/pddl/ipc2002/depots/strips-automatic/domain.pddl
           src/test/resources/benchmarks/pddl/ipc2002/depots/strips-automatic/p01.pddl
           -t 1000

    java -cp build/libs/pddl4j-4.0.0.jar fr.uga.pddl4j.planners.statespace.HSP
         src/test/resources/benchmarks/pddl/ipc2002/depots/strips-automatic/domain.pddl
         src/test/resources/benchmarks/pddl/ipc2002/depots/strips-automatic/p01.pddl
         -e MAX
         -w 1.2
         -t 600

    java -cp build/libs/pddl4j-4.0.0.jar fr.uga.pddl4j.planners.statespace.GSP
          src/test/resources/benchmarks/pddl/ipc2002/depots/strips-automatic/domain.pddl
          src/test/resources/benchmarks/pddl/ipc2002/depots/strips-automatic/p01.pddl
          -s ENFORCED_HILL_CLIMBING ASTAR
          -e FAST_FORWARD
          -t 1000
         """

    def next_step_exec(self, next_step):
        # self.letters = [' ', 'Wall', 'Box', 'Target', 'Player', 'b/tgt', 'p/tgt']
        array = self.buttons_to_int()
        # print("Filling previous steps for ", self.current_execution_step, "with ")
        # self.print_array(array)
        self.all_previous_arrays[self.current_execution_step] = self.buttons_to_int()
        on_target = False
        player = [-1, -1]
        for i in range(self.rows):
            for j in range(self.cols):
                if array[i][j] == 4 :
                    player = [i, j]
                if array[i][j] == 6 :
                    player = [i, j]
                    on_target = True
        if player[0] == -1 :
            print("Error with player position")
            sys.exit(0)
        if next_step == "RIGHT" :
            next_cell = ( player[0], player[1]+1 )
            next_next_cell = ( player[0], player[1]+2 )
        elif next_step == "LEFT" :
            next_cell = ( player[0], player[1] - 1 )
            next_next_cell = ( player[0], player[1] - 2 )
        elif next_step == "UP" :
            next_cell = ( player[0] - 1, player[1] )
            next_next_cell = ( player[0] - 2, player[1] )
        else : # next_step == "DOWN"
            next_cell = ( player[0] + 1, player[1] )
            next_next_cell = ( player[0] + 2, player[1] )

        next = array[next_cell[0]][next_cell[1]]
        next_next = array[next_next_cell[0]][next_next_cell[1]]

        if next == 0 : # next is empty
            array[next_cell[0]][next_cell[1]] = 4 # next is player
        elif next == 3 : # next is Target
            array[next_cell[0]][next_cell[1]] = 6 # next is player on target
        elif next == 2 : # next is box
            array[next_cell[0]][next_cell[1]] = 4 # next is player
            if next_next == 3 : # next_next is target
                array[next_next_cell[0]][next_next_cell[1]] = 5 # next next is box on target
            elif next_next == 0 : # next is empty
                array[next_next_cell[0]][next_next_cell[1]] = 2  # next next is box
            else :
                print("Error, next cell is neither empty nor target.")
                sys.exit(1)
        elif next == 5 : # next is box on target
            array[next_cell[0]][next_cell[1]] = 6 # next is player on target
            if next_next == 3 : # next_next is target
                array[next_next_cell[0]][next_next_cell[1]] = 5 # next next is box on target
            elif next_next == 0 : # next next is empty
                array[next_next_cell[0]][next_next_cell[1]] = 2  # next next is box
            else :
                print("Error, next cell is neither empty nor target.")
                sys.exit(1)
        else:
            print("Error : Next cell can't move.")
            sys.exit(1)

        if on_target :
            array[player[0]][player[1]] = 3
        else :
            array[player[0]][player[1]] = 0

        self.update_buttons(array)

    def update_buttons(self, array):
        number = 0
        for i in range(self.rows):
            for j in range(self.cols):
                self.set_button_color(self.pushbuttons[number], array[i][j])
                number += 1

    def previous_step(self):
        if self.current_execution_step > 0 :
            previous_array = self.all_previous_arrays[self.current_execution_step-1]
            # self.print_array(previous_array)
            self.update_buttons(previous_array)
            self.current_execution_step -= 1

    def next_step(self):
        if not self.execution_running :
            if self.current_execution_step < len(self.current_solution):
                next_step = self.current_solution[self.current_execution_step]
                print("Next step : ", next_step)
                self.next_step_exec(next_step)
                self.current_execution_step += 1

    def print_array(self, array):
        text = ""
        for i in range(len(array)):
            for j in range(len(array[i])):
                text += "{} ".format(array[i][j])
            text += "\n"
        # print("Array : ")
        # print(text)



    def quit(self):
        sys.exit(0)


if __name__ == "__main__":
    import sys
    if not os.path.exists("jsonToDomain.class") or not os.path.exists("Tuple.class"):
    	print("Compiling java files")
    	os.system('javac {} {}'.format("jsonToDomain.java", "Tuple.java"))

    app = QtWidgets.QApplication(sys.argv)
    w = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(w)
    w.show()
    sys.exit(app.exec_())
